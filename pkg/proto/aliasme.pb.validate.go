// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aliasme.proto

package aliasme

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Email

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRequestMultiError, or nil if none found.
func (m *CreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Password

	if len(errors) > 0 {
		return CreateUserRequestMultiError(errors)
	}

	return nil
}

// CreateUserRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRequestMultiError) AllErrors() []error { return m }

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRequestMultiError, or nil if none found.
func (m *UpdateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Email

	if len(errors) > 0 {
		return UpdateUserRequestMultiError(errors)
	}

	return nil
}

// UpdateUserRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRequestMultiError) AllErrors() []error { return m }

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on DeleteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserRequestMultiError, or nil if none found.
func (m *DeleteUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteUserRequestMultiError(errors)
	}

	return nil
}

// DeleteUserRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteUserRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserRequestMultiError) AllErrors() []error { return m }

// DeleteUserRequestValidationError is the validation error returned by
// DeleteUserRequest.Validate if the designated constraints aren't met.
type DeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRequestValidationError) ErrorName() string {
	return "DeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRequestValidationError{}

// Validate checks the field values on DeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserResponseMultiError, or nil if none found.
func (m *DeleteUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteUserResponseMultiError(errors)
	}

	return nil
}

// DeleteUserResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteUserResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserResponseMultiError) AllErrors() []error { return m }

// DeleteUserResponseValidationError is the validation error returned by
// DeleteUserResponse.Validate if the designated constraints aren't met.
type DeleteUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserResponseValidationError) ErrorName() string {
	return "DeleteUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserResponseValidationError{}

// Validate checks the field values on GetUserByEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByEmailRequestMultiError, or nil if none found.
func (m *GetUserByEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if len(errors) > 0 {
		return GetUserByEmailRequestMultiError(errors)
	}

	return nil
}

// GetUserByEmailRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserByEmailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserByEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByEmailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByEmailRequestMultiError) AllErrors() []error { return m }

// GetUserByEmailRequestValidationError is the validation error returned by
// GetUserByEmailRequest.Validate if the designated constraints aren't met.
type GetUserByEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByEmailRequestValidationError) ErrorName() string {
	return "GetUserByEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByEmailRequestValidationError{}

// Validate checks the field values on GetUserByEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByEmailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByEmailResponseMultiError, or nil if none found.
func (m *GetUserByEmailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByEmailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserByEmailResponseMultiError(errors)
	}

	return nil
}

// GetUserByEmailResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserByEmailResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserByEmailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByEmailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByEmailResponseMultiError) AllErrors() []error { return m }

// GetUserByEmailResponseValidationError is the validation error returned by
// GetUserByEmailResponse.Validate if the designated constraints aren't met.
type GetUserByEmailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByEmailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByEmailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByEmailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByEmailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByEmailResponseValidationError) ErrorName() string {
	return "GetUserByEmailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByEmailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByEmailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByEmailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByEmailResponseValidationError{}

// Validate checks the field values on Email with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Email) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Email with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EmailMultiError, or nil if none found.
func (m *Email) ValidateAll() error {
	return m.validate(true)
}

func (m *Email) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for Address

	// no validation rules for Verified

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EmailValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EmailValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EmailValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EmailValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EmailValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EmailValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EmailMultiError(errors)
	}

	return nil
}

// EmailMultiError is an error wrapping multiple validation errors returned by
// Email.ValidateAll() if the designated constraints aren't met.
type EmailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmailMultiError) AllErrors() []error { return m }

// EmailValidationError is the validation error returned by Email.Validate if
// the designated constraints aren't met.
type EmailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailValidationError) ErrorName() string { return "EmailValidationError" }

// Error satisfies the builtin error interface
func (e EmailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailValidationError{}

// Validate checks the field values on RegisterEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterEmailRequestMultiError, or nil if none found.
func (m *RegisterEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for EmailAddress

	if len(errors) > 0 {
		return RegisterEmailRequestMultiError(errors)
	}

	return nil
}

// RegisterEmailRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterEmailRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterEmailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterEmailRequestMultiError) AllErrors() []error { return m }

// RegisterEmailRequestValidationError is the validation error returned by
// RegisterEmailRequest.Validate if the designated constraints aren't met.
type RegisterEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterEmailRequestValidationError) ErrorName() string {
	return "RegisterEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterEmailRequestValidationError{}

// Validate checks the field values on VerifyEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyEmailRequestMultiError, or nil if none found.
func (m *VerifyEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return VerifyEmailRequestMultiError(errors)
	}

	return nil
}

// VerifyEmailRequestMultiError is an error wrapping multiple validation errors
// returned by VerifyEmailRequest.ValidateAll() if the designated constraints
// aren't met.
type VerifyEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyEmailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyEmailRequestMultiError) AllErrors() []error { return m }

// VerifyEmailRequestValidationError is the validation error returned by
// VerifyEmailRequest.Validate if the designated constraints aren't met.
type VerifyEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyEmailRequestValidationError) ErrorName() string {
	return "VerifyEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyEmailRequestValidationError{}

// Validate checks the field values on Alias with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Alias) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Alias with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AliasMultiError, or nil if none found.
func (m *Alias) ValidateAll() error {
	return m.validate(true)
}

func (m *Alias) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for EmailId

	// no validation rules for AliasAddress

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AliasValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AliasValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AliasValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AliasValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AliasValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AliasValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AliasMultiError(errors)
	}

	return nil
}

// AliasMultiError is an error wrapping multiple validation errors returned by
// Alias.ValidateAll() if the designated constraints aren't met.
type AliasMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AliasMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AliasMultiError) AllErrors() []error { return m }

// AliasValidationError is the validation error returned by Alias.Validate if
// the designated constraints aren't met.
type AliasValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AliasValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AliasValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AliasValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AliasValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AliasValidationError) ErrorName() string { return "AliasValidationError" }

// Error satisfies the builtin error interface
func (e AliasValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlias.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AliasValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AliasValidationError{}

// Validate checks the field values on CreateAliasRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAliasRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAliasRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAliasRequestMultiError, or nil if none found.
func (m *CreateAliasRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAliasRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for EmailId

	// no validation rules for AliasPrefix

	if len(errors) > 0 {
		return CreateAliasRequestMultiError(errors)
	}

	return nil
}

// CreateAliasRequestMultiError is an error wrapping multiple validation errors
// returned by CreateAliasRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateAliasRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAliasRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAliasRequestMultiError) AllErrors() []error { return m }

// CreateAliasRequestValidationError is the validation error returned by
// CreateAliasRequest.Validate if the designated constraints aren't met.
type CreateAliasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAliasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAliasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAliasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAliasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAliasRequestValidationError) ErrorName() string {
	return "CreateAliasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAliasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAliasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAliasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAliasRequestValidationError{}

// Validate checks the field values on GetAliasRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAliasRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAliasRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAliasRequestMultiError, or nil if none found.
func (m *GetAliasRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAliasRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetAliasRequestMultiError(errors)
	}

	return nil
}

// GetAliasRequestMultiError is an error wrapping multiple validation errors
// returned by GetAliasRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAliasRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAliasRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAliasRequestMultiError) AllErrors() []error { return m }

// GetAliasRequestValidationError is the validation error returned by
// GetAliasRequest.Validate if the designated constraints aren't met.
type GetAliasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAliasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAliasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAliasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAliasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAliasRequestValidationError) ErrorName() string { return "GetAliasRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAliasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAliasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAliasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAliasRequestValidationError{}

// Validate checks the field values on UpdateAliasRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAliasRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAliasRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAliasRequestMultiError, or nil if none found.
func (m *UpdateAliasRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAliasRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EmailId

	// no validation rules for AliasPrefix

	if len(errors) > 0 {
		return UpdateAliasRequestMultiError(errors)
	}

	return nil
}

// UpdateAliasRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateAliasRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateAliasRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAliasRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAliasRequestMultiError) AllErrors() []error { return m }

// UpdateAliasRequestValidationError is the validation error returned by
// UpdateAliasRequest.Validate if the designated constraints aren't met.
type UpdateAliasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAliasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAliasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAliasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAliasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAliasRequestValidationError) ErrorName() string {
	return "UpdateAliasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAliasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAliasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAliasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAliasRequestValidationError{}

// Validate checks the field values on DeleteAliasRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAliasRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAliasRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAliasRequestMultiError, or nil if none found.
func (m *DeleteAliasRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAliasRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteAliasRequestMultiError(errors)
	}

	return nil
}

// DeleteAliasRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteAliasRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteAliasRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAliasRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAliasRequestMultiError) AllErrors() []error { return m }

// DeleteAliasRequestValidationError is the validation error returned by
// DeleteAliasRequest.Validate if the designated constraints aren't met.
type DeleteAliasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAliasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAliasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAliasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAliasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAliasRequestValidationError) ErrorName() string {
	return "DeleteAliasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAliasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAliasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAliasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAliasRequestValidationError{}

// Validate checks the field values on DeleteAliasResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAliasResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAliasResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAliasResponseMultiError, or nil if none found.
func (m *DeleteAliasResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAliasResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteAliasResponseMultiError(errors)
	}

	return nil
}

// DeleteAliasResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteAliasResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteAliasResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAliasResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAliasResponseMultiError) AllErrors() []error { return m }

// DeleteAliasResponseValidationError is the validation error returned by
// DeleteAliasResponse.Validate if the designated constraints aren't met.
type DeleteAliasResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAliasResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAliasResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAliasResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAliasResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAliasResponseValidationError) ErrorName() string {
	return "DeleteAliasResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAliasResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAliasResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAliasResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAliasResponseValidationError{}

// Validate checks the field values on ListAliasesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAliasesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAliasesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAliasesRequestMultiError, or nil if none found.
func (m *ListAliasesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAliasesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return ListAliasesRequestMultiError(errors)
	}

	return nil
}

// ListAliasesRequestMultiError is an error wrapping multiple validation errors
// returned by ListAliasesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListAliasesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAliasesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAliasesRequestMultiError) AllErrors() []error { return m }

// ListAliasesRequestValidationError is the validation error returned by
// ListAliasesRequest.Validate if the designated constraints aren't met.
type ListAliasesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAliasesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAliasesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAliasesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAliasesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAliasesRequestValidationError) ErrorName() string {
	return "ListAliasesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAliasesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAliasesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAliasesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAliasesRequestValidationError{}

// Validate checks the field values on ListAliasesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAliasesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAliasesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAliasesResponseMultiError, or nil if none found.
func (m *ListAliasesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAliasesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAliases() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAliasesResponseValidationError{
						field:  fmt.Sprintf("Aliases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAliasesResponseValidationError{
						field:  fmt.Sprintf("Aliases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAliasesResponseValidationError{
					field:  fmt.Sprintf("Aliases[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAliasesResponseMultiError(errors)
	}

	return nil
}

// ListAliasesResponseMultiError is an error wrapping multiple validation
// errors returned by ListAliasesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAliasesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAliasesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAliasesResponseMultiError) AllErrors() []error { return m }

// ListAliasesResponseValidationError is the validation error returned by
// ListAliasesResponse.Validate if the designated constraints aren't met.
type ListAliasesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAliasesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAliasesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAliasesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAliasesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAliasesResponseValidationError) ErrorName() string {
	return "ListAliasesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAliasesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAliasesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAliasesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAliasesResponseValidationError{}
